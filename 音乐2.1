local player = game:GetService("Players").LocalPlayer
local userInput = game:GetService("UserInputService")
local replicatedStorage = game:GetService("ReplicatedStorage")

if not player:FindFirstChild("PlayerGui") then player:WaitForChild("PlayerGui") end

-- ================== 核心：增强型UI拖动处理器 ==================
-- 此函数提供流畅、可靠的UI拖动功能，支持鼠标和触摸输入
local function CreateEnhancedDragHandler(draggableFrame, dragHandle)
    -- 拖动状态变量
    local dragActive = false
    local dragStartPos = Vector2.new()
    local frameStartPos = UDim2.new()
    
    -- 鼠标/触摸按下事件：开始拖动
    local function onInputBegan(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or 
           input.UserInputType == Enum.UserInputType.Touch then
            
            dragActive = true
            dragStartPos = input.Position
            frameStartPos = draggableFrame.Position
            
            -- 为触摸输入启用捕获，防止拖动时失去焦点 [3](@ref)
            if input.UserInputType == Enum.UserInputType.Touch then
                input:Capture()
            end
            
            -- 视觉反馈：拖动开始时轻微改变透明度 [5](@ref)
            draggableFrame.BackgroundTransparency = 0.1
        end
    end
    
    -- 鼠标/触摸移动事件：处理拖动
    local function onInputChanged(input)
        if dragActive then
            -- 获取当前输入位置 [1](@ref)
            local currentPos = input.UserInputType == Enum.UserInputType.Touch and 
                             input.Position or userInput:GetMouseLocation()
            
            -- 计算偏移量 [1](@ref)
            local delta = currentPos - dragStartPos
            
            -- 更新UI位置（无边界限制） [1](@ref)
            draggableFrame.Position = UDim2.new(
                frameStartPos.X.Scale, frameStartPos.X.Offset + delta.X,
                frameStartPos.Y.Scale, frameStartPos.Y.Offset + delta.Y
            )
        end
    end
    
    -- 鼠标/触摸释放事件：结束拖动
    local function onInputEnded()
        if dragActive then
            dragActive = false
            -- 恢复透明度
            draggableFrame.BackgroundTransparency = 0
        end
    end
    
    -- 将事件监听器连接到拖动手柄 [3](@ref)
    dragHandle.InputBegan:Connect(onInputBegan)
    dragHandle.InputChanged:Connect(onInputChanged)
    dragHandle.InputEnded:Connect(onInputEnded)
    
    -- 返回控制接口（便于后续扩展）
    return {
        SetEnabled = function(enabled)
            dragActive = enabled and dragActive
        end,
        IsDragging = function()
            return dragActive
        end
    }
end
-- ================== 增强型拖动处理器结束 ==================

local function CreateFullUI()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "MusicPlayerUI_"..math.random(1000,9999)
    screenGui.ResetOnSpawn = false
    screenGui.DisplayOrder = 999
    screenGui.Parent = player.PlayerGui

    -- 主容器框架
    local mainFrame = Instance.new("Frame")
    mainFrame.Size = UDim2.new(0, 300, 0, 200)
    mainFrame.Position = UDim2.new(0.5, -150, 0.5, -100)
    mainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
    mainFrame.BackgroundColor3 = Color3.fromRGB(225, 225, 225)
    mainFrame.BorderSizePixel = 1
    mainFrame.Parent = screenGui

    -- 为主框架添加圆角
    local mainCorner = Instance.new("UICorner")
    mainCorner.CornerRadius = UDim2.new(0, 12)
    mainCorner.Parent = mainFrame

    -- 标题栏（作为拖动手柄）
    local titleBar = Instance.new("Frame")
    titleBar.Size = UDim2.new(1, 0, 0, 30)
    titleBar.BackgroundColor3 = Color3.fromRGB(180, 180, 180)
    titleBar.Parent = mainFrame
    
    -- 为标题栏添加圆角（仅顶部圆角）
    local titleBarCorner = Instance.new("UICorner")
    titleBarCorner.CornerRadius = UDim2.new(0, 12)
    titleBarCorner.Parent = titleBar

    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(1, -60, 1, 0)
    titleLabel.Position = UDim2.new(0, 5, 0, 0)
    titleLabel.Text = "MUSIC PLAYER ♪♪[made by余客]"
    titleLabel.TextColor3 = Color3.fromRGB(50, 50, 50)
    titleLabel.TextSize = 18
    titleLabel.Font = Enum.Font.SourceSansBold
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.BackgroundTransparency = 1
    titleLabel.Parent = titleBar

    -- 关闭按钮
    local closeButton = Instance.new("TextButton")
    closeButton.Size = UDim2.new(0, 25, 0, 25)
    closeButton.Position = UDim2.new(1, -30, 0.5, -12.5)
    closeButton.AnchorPoint = Vector2.new(1, 0.5)
    closeButton.Text = "X"
    closeButton.Font = Enum.Font.SourceSansBold
    closeButton.TextSize = 16
    closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    closeButton.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
    closeButton.BorderSizePixel = 0
    closeButton.Parent = titleBar
    
    -- 为关闭按钮添加圆角
    local closeCorner = Instance.new("UICorner")
    closeCorner.CornerRadius = UDim2.new(0, 6)
    closeCorner.Parent = closeButton
    
    closeButton.MouseButton1Click:Connect(function()
        screenGui:Destroy()
    end)

    -- ================== 应用增强型拖动处理器 ==================
    -- 将标题栏设置为拖动手柄，拖动整个主框架
    local dragHandler = CreateEnhancedDragHandler(mainFrame, titleBar)
    -- ================== 拖动集成完成 ==================

    -- 输入框创建函数
    local function CreateInputBox(posY, placeholder, sizeX, posX)
        local box = Instance.new("TextBox")
        box.Size = UDim2.new(sizeX, 0, 0, 25)
        box.Position = UDim2.new(posX, 0, posY, 0)
        box.PlaceholderText = placeholder
        box.BackgroundColor3 = Color3.fromRGB(245, 245, 245)
        box.TextColor3 = Color3.fromRGB(0, 0, 0)
        box.Font = Enum.Font.SourceSans
        box.TextSize = 14
        box.Parent = mainFrame
        
        -- 为输入框添加圆角
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim2.new(0, 6)
        corner.Parent = box
        
        return box
    end

    local musicIDBox = CreateInputBox(0.2, "[Music ID]", 0.9, 0.05)
    local volumeBox = CreateInputBox(0.4, "[Volume] (0.1-100)", 0.4, 0.05)
    local pitchBox = CreateInputBox(0.4, "[Pitch] (0.1-100)", 0.4, 0.55)

    -- 按钮创建函数
    local function CreateButton(text, posX, posY, sizeX, color)
        local btn = Instance.new("TextButton")
        btn.Size = UDim2.new(sizeX, 0, 0, 30)
        btn.Position = UDim2.new(posX, 0, posY, 0)
        btn.Text = text
        btn.Font = Enum.Font.SourceSansBold
        btn.TextSize = 14
        btn.TextColor3 = Color3.fromRGB(255, 255, 255)
        btn.BackgroundColor3 = color
        btn.Parent = mainFrame
        
        -- 为按钮添加圆角
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim2.new(0, 8)
        corner.Parent = btn
        
        return btn
    end

    local playButton = CreateButton("Play", 0.05, 0.65, 0.4, Color3.fromRGB(100, 100, 100))
    local stopButton = CreateButton("Stop", 0.55, 0.65, 0.4, Color3.fromRGB(150, 50, 50))

    -- 切换按钮创建函数
    local function CreateToggleButton(text, posX, posY, sizeX, color)
        local btn = Instance.new("TextButton")
        btn.Size = UDim2.new(sizeX, 0, 0, 25)
        btn.Position = UDim2.new(posX, 0, posY, 0)
        btn.Text = text
        btn.Font = Enum.Font.SourceSansBold
        btn.TextSize = 12
        btn.BackgroundColor3 = color
        btn.Parent = mainFrame
        
        -- 为切换按钮添加圆角
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim2.new(0, 6)
        corner.Parent = btn
        
        return btn
    end

    local loopToggle = CreateToggleButton("Loop: ON", 0.55, 0.85, 0.4, Color3.new(0,0,0))
    loopToggle.BackgroundTransparency = 1
    loopToggle.TextColor3 = Color3.fromRGB(0, 200, 0)

    local modeButton = CreateToggleButton("智能模式", 0.05, 0.85, 0.4, Color3.fromRGB(180, 180, 255))

    -- 音频控制系统（你的原有逻辑保持不变）
    local soundSystem = {
        LoopEnabled = true,
        ActiveSounds = {},
        RemoteEvent = nil,
        CurrentMode = "auto",
        ModeNames = {auto = "智能模式", mode1 = "缓存模式", mode2 = "遍历模式"},
        ModeColors = {
            auto = Color3.fromRGB(180, 180, 255),
            mode1 = Color3.fromRGB(180, 255, 180),
            mode2 = Color3.fromRGB(255, 180, 180)
        },
        LastSoundName = nil,
        TwinMode = false
    }
    
    local function UpdateModeButton()
        modeButton.Text = soundSystem.ModeNames[soundSystem.CurrentMode]
        modeButton.BackgroundColor3 = soundSystem.ModeColors[soundSystem.CurrentMode]
    end
    
    modeButton.MouseButton1Click:Connect(function()
        soundSystem.CurrentMode = soundSystem.CurrentMode == "auto" and "mode1" or 
                                 soundSystem.CurrentMode == "mode1" and "mode2" or "auto"
        UpdateModeButton()
    end)
    
    -- 音乐播放逻辑（你的原有逻辑）
    local function handlePlayback()
        local musicID = musicIDBox.Text:gsub("%D+", "")
        if not musicID:match("^%d+$") or #musicID < 6 then
            warn("请输入有效的音乐ID（至少6位数字）")
            return
        end
        
        local volume = math.clamp(tonumber(volumeBox.Text) or 1, 0.1, 100)
        local pitch = math.clamp(tonumber(pitchBox.Text) or 1, 0.1, 100)
        
        -- 这里放置你的音乐播放逻辑
        print("播放音乐:", musicID, "音量:", volume, "音高:", pitch, "循环:", soundSystem.LoopEnabled)
        
        -- 视觉反馈
        playButton.BackgroundColor3 = Color3.fromRGB(70, 170, 70)
        task.delay(0.1, function() 
            playButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100) 
        end)
    end

    local function handleStop()
        -- 这里放置你的停止音乐逻辑
        print("停止所有音乐")
        
        -- 视觉反馈
        stopButton.BackgroundColor3 = Color3.fromRGB(200, 70, 70)
        task.delay(0.1, function() 
            stopButton.BackgroundColor3 = Color3.fromRGB(150, 50, 50) 
        end)
    end
    
    -- 连接事件
    playButton.MouseButton1Click:Connect(handlePlayback)
    stopButton.MouseButton1Click:Connect(handleStop)
    
    loopToggle.MouseButton1Click:Connect(function()
        soundSystem.LoopEnabled = not soundSystem.LoopEnabled
        loopToggle.Text = soundSystem.LoopEnabled and "Loop: ON" or "Loop: OFF"
        loopToggle.TextColor3 = soundSystem.LoopEnabled and 
            Color3.fromRGB(0, 200, 0) or Color3.fromRGB(200, 0, 0)
    end)

    UpdateModeButton()

    return screenGui
end

-- 创建UI
CreateFullUI()
print("音乐播放器UI已加载 - 拖动功能已启用")
